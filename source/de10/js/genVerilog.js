const genPort = (port) => {
    let out = "\t" + (port.direction == "inout" ? port.direction : port.direction + "put").toLowerCase() + "\t";
    if (port.size > 1) {
        out += `[${port.size+port.sizeFrom-1}:${port.sizeFrom}]`
    } else out += "\t"
    out += "\t"
    out += port.name.toUpperCase() + ",";
    //out += "\t//" + port.pinAssign.toString()
    return out
}

const genPortGroup = (ast, group) => {
    let port = Object.keys(ast.port)
        .filter((q) => ast.port[q].portGroup == group)
        .map(q => genPort(ast.port[q]))

    return `\t //////// ${group.toUpperCase()} ////////\n${port.join("\n")}\n\n`
}

module.exports = (ast) => {

    let portGroups = Object.keys(ast.port)
        .map(q => ast.port[q].portGroup)
        .sort((a, b) => a == b ? 0 : a > b ? 1 : -1)
        .reduce((p, c) => {
            if (p.indexOf(c) < 0) p.push(c);
            return p
        }, [])
    //console.log(portGroups)

    let portDef = portGroups
        .map(q => genPortGroup(ast, q))
        .join("\n")
        .replace(/,(\s*?)$/, "$1") //remove last comma

    window.ss = portDef

    return `//=======================================================
//  This code is generated by datacipy.cz/gen
//=======================================================

module ${ast.name} (
${portDef}
);
    
//=======================================================
//  REG/WIRE declarations
//=======================================================




//=======================================================
//  Structural coding
//=======================================================



endmodule
`
}